<launch>
    <arg name="laser_frame_id" default="rplidar_laser_link" />
    <!--arg name="model" default="$(env auto_rover_MODEL)" doc="model type [auto_rover, remo]"/-->
    <arg name="model" default="auto_rover" doc="model type [auto_rover, remo]"/>

    <!-- The `minimal.launch` is used to load the auto_rover's robot descripton
        and the controller configuration onto the ROS parameter server using the launch file from the 
        `auto_rover_base` package (https://fjp.at/projects/auto_rover/ros-packages/base/). 
        It will also setup the ROS controller manager (http://wiki.ros.org/controller_manager) with 
        auto_rover's hardware interface https://fjp.at/projects/auto_rover/ros-packages/base/#hardware-interface.
        For the motor driver the node `motor_driver.py` from the `grove_motor_driver` package is started.
        And for the encoders rosserial communicates with the Teensy microcontroller to publish the encoder ticks. 
    -->
    <include file="$(find auto_rover_bringup)/launch/minimal.launch">
        <arg name="model" value="$(arg model)" />
    </include>

    <!-- Starting robot state publish which will publish tf -->
    <!-- This is needed to publish transforms between all links -->
    <!-- diff_drive_controller publishes only a single transfrom between odom and base_footprint -->
    <!-- The robot_state_publisher reads the joint states published by ros control's joint_state_controller -->
    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher"
        output="screen" ns="auto_rover" />

    <include file="$(find auto_rover_bringup)/launch/rplidar.launch" ns="auto_rover">
        <arg name="laser_frame_id" value="$(arg laser_frame_id)" />
    </include>

</launch>
